"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const tl = require("azure-pipelines-task-lib/task");
const project_check_result_1 = require("./project-check-result");
const { exec } = require('child-process-async');
const fg = require("fast-glob");
function run() {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const projectGlobPath = tl.getInput('projectPath', true);
            // projectGlobPath = 'C:/MyGit/Personal/VulnerabilityTest/**/*.csproj';
            const projectFiles = yield getProjectFilesAsync(projectGlobPath);
            tl.debug(`Found ${projectFiles.length} projet files`);
            let failureString = '';
            try {
                for (var projectFiles_1 = __asyncValues(projectFiles), projectFiles_1_1; projectFiles_1_1 = yield projectFiles_1.next(), !projectFiles_1_1.done;) {
                    const pf = projectFiles_1_1.value;
                    var checkResult = yield checkProjectAsync(pf);
                    if (!checkResult.wasSuccess) {
                        failureString = checkResult.errorMessage + '\r\n';
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (projectFiles_1_1 && !projectFiles_1_1.done && (_a = projectFiles_1.return)) yield _a.call(projectFiles_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (failureString !== '') {
                tl.setResult(tl.TaskResult.Failed, failureString);
            }
            else {
                tl.setResult(tl.TaskResult.Succeeded, 'Everything is awesome');
            }
        }
        catch (err) {
            tl.setResult(tl.TaskResult.Failed, 'Task failed with exception: ' + err.message);
        }
    });
}
function getProjectFilesAsync(projectGlobPath) {
    return __awaiter(this, void 0, void 0, function* () {
        projectGlobPath = projectGlobPath.replace('\\', '/');
        projectGlobPath = projectGlobPath.replace('//', '/');
        const result = yield fg(projectGlobPath);
        return result;
    });
}
function checkCliReturnTextContainsWarnings(text) {
    const keywords = ['Critical', 'High', 'Moderate'];
    let foundWarning = false;
    keywords.forEach(kw => {
        if (text.includes(kw)) {
            console.log('tra');
            foundWarning = true;
        }
    });
    return foundWarning;
}
function checkProjectAsync(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const netCliResult = yield exec(`dotnet list ${projectPath} package --vulnerable --include-transitive`, {});
        if (netCliResult.stderr) {
            return new project_check_result_1.ProjectCheckResult(false, 'Task failed with stderr: ' + netCliResult.stderr);
        }
        const text = netCliResult.stdout;
        if (checkCliReturnTextContainsWarnings(text)) {
            tl.setResult(tl.TaskResult.Failed, text);
            return new project_check_result_1.ProjectCheckResult(false, text);
        }
        return new project_check_result_1.ProjectCheckResult(true);
    });
}
run();
